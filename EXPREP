
# PROBLEM LINK: https://www.codechef.com/JULY20B/problems/EXPREP/

# REFERENCE: https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/
# https://stackoverflow.com/questions/8899905/count-number-of-occurrences-of-a-given-substring-in-a-string
def modInverse(a, m) : 
    m0 = m 
    y = 0
    x = 1
  
    if (m == 1) : 
        return 0
  
    while (a > 1) : 
  
        # q is quotient 
        q = a // m 
  
        t = m 
  
        # m is remainder now, process 
        # same as Euclid's algo 
        m = a % m 
        a = t 
        t = y 
  
        # Update x and y 
        y = x - q * y 
        x = t 
  
  
    # Make x positive 
    if (x < 0) : 
        x = x + m0 
  
    return x 

def count_substring(string,sub_string):
    l=len(sub_string)
    count=0
    for i in range(len(string)-len(sub_string)+1):
        if(string[i:i+len(sub_string)] == sub_string ):      
            count+=1
    return count  

Test_cases=int(input())
MOD=998244353
for tests in range(Test_cases):
    s=input()
    w=list(map(int,input().split()))
    k=set()
    for i in range(len(s)):
        temp=""
        for j in range(i,len(s)):
            temp+=s[j]
            k.add(temp)
    dict1={}
    for i in k:
        temp2=i
        val=0
        for j in range(len(temp2)):
            val+=w[ord(temp2[j])-97]
        dict1[temp2]=val
    denominator=0
    dict2={}
    for i in k:
        temp2=i
        ans=count_substring(s,temp2)
        denominator+=ans
        dict2[temp2]=ans
    dict3={}
    for i in k:
        temp2=i
        weight=0
        for l in range(len(temp2)):
            sub=temp2[0:l+1]
            p=0
            q=0
            while(True):
                q=q%len(sub)
                if temp2[p]!=sub[q]:
                    break
                elif p==len(temp2)-1:
                    weight+=dict1[sub]
                    break
                p+=1
                q+=1
        dict3[temp2]=weight%MOD
    numerator=0
    for key,value in dict3.items():
        x=dict2[key]
        numerator+=(x*value)%MOD
    numerator=numerator%MOD
    denominator=denominator%MOD
    final_ans=modInverse(denominator,MOD)%MOD
    final_ans=(final_ans*numerator)%MOD
    print(final_ans)
